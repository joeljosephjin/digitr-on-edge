import { SessionHandler } from './backend.js';
import { InferenceSession as InferenceSession } from './inference-session.js';
import { TrainingSession as TrainingSessionInterface, TrainingSessionCreateOptions } from './training-session.js';
type SessionOptions = InferenceSession.SessionOptions;
type FeedsType = InferenceSession.FeedsType;
type FetchesType = InferenceSession.FetchesType;
type ReturnType = InferenceSession.ReturnType;
type RunOptions = InferenceSession.RunOptions;
export declare class TrainingSession implements TrainingSessionInterface {
    private constructor();
    private handler;
    get inputNames(): readonly string[];
    get outputNames(): readonly string[];
    static create(trainingOptions: TrainingSessionCreateOptions, sessionOptions?: SessionOptions): Promise<TrainingSession>;
    /**
     * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
     * the given parameters to SessionHandler.FetchesType and RunOptions.
     *
     * @param feeds the required input
     * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
     * @param arg2 optional RunOptions object.
     * @returns
     */
    typeNarrowingForRunStep(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): [
        SessionHandler.FetchesType,
        RunOptions
    ];
    /**
     * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
     * and changes it into a map of Tensors.
     *
     * @param results
     * @returns
     */
    convertHandlerReturnTypeToMapOfTensors(results: SessionHandler.ReturnType): ReturnType;
    runTrainStep(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;
    runTrainStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;
    loadParametersBuffer(_array: Uint8Array, _trainableOnly: boolean): Promise<void>;
    getContiguousParameters(_trainableOnly: boolean): Promise<Uint8Array>;
    release(): Promise<void>;
}
export {};
//# sourceMappingURL=training-session-impl.d.ts.map